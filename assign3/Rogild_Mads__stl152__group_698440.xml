<?xml version="1.0" ?>
<review for-group="Rogild_Mads__stl152__group_698440">
  <exercises>

    <question1>
      <title>Serializability and Locking</title>
      <schedule1>
        <text>
          Is the solution provided both correct and includes a convincing short
          argument justifying it?
        </text>
        <answer>NO</answer>
        <comment>The solutions provided are correct, but they lack a convincing
        argument for why that is the case</comment>
      </schedule1>

      <schedule2>
        <text>
          Is the solution provided both correct and includes a convincing short
          argument justifying it?
        </text>
        <answer>No</answer>
        <comment>Answer is correct, but again, argument is insufficient</comment>
      </schedule2>
    </question1>

    <question2>
      <title>Optimistic Concurrency Control</title>
      <scenario1>
        <text>
          Is the solution provided both correct and includes a convincing short
          argument justifying it?
        </text>
        <answer>YES</answer>
        <comment></comment>
      </scenario1>

      <scenario2>
        <text>
          Is the solution provided both correct and includes a convincing short
          argument justifying it?
        </text>
        <answer>YES</answer>
        <comment></comment>
      </scenario2>

      <scenario3>
        <text>
          Is the solution provided both correct and includes a convincing short
          argument justifying it?
        </text>
        <answer>YES</answer>
        <comment></comment>
      </scenario3>

    </question2>
  </exercises>

  <programming>

    <question1>
      <title>Description of implementation and tests</title>
      <q1a>
        <text>
          Does the solution contain a clear description of the approach
          used to achieve before-or-after atomicity?
        </text>
        <answer>NO</answer>
      </q1a>
      <q1b>
        <text>
          Provide comments on any aspects that you found unclear in the
          description of the approach to achieve before-or-after atomicity
        </text>
        <answer>It contains a lowish-level description of how their custom locking
        mechanism works rather than describing how it is used to achieve
        before-or-after atomicity in the book-store</answer>
      </q1b>
      <q1c>
        <text>
          Does the code include implementations of Tests 1 and 2 of the
          assignment description as well as of at least another two test
          cases?
        </text>
        <answer>YES</answer>
      </q1c>
      <q1d-i>
        <text>
          Is it tested that the final state resulting from concurrent
          execution
          is correct in that it respects invariants designed in the test?
        </text>
        <answer>NO</answer>
      </q1d-i>
      <q1d-ii>
        <text>
          Is it tested that intermediate reads of the state during concurrent
          execution respect invariants designed in the test, so that it is
          arguable that these intermediate states could be found in an
          equivalent serial schedule?
        </text>
        <answer>NO</answer>
      </q1d-ii>
      <q1e>
        <text>
          Provide comments on why you found that any portions of the test
          descriptions were unclear according to the criteria, and suggestions for
          improvement
        </text>
        <answer>The tests does attempt to check for the required aspects,
        however due to implementation errors this does not correctly happen in
        practice. A common error in many of the tests is that the concurrent
        threads are started but not joined before the final state is
        checked. Thus, the tests does not test the intended properties. The
        testAddBuyTest additionally also doesn't correctly verify the number of
        _copies_ in the bookstore since only the number of different books in
        the bookstore is compared.</answer>
      </q1e>
    </question1>

    <question2>
      <title>Correctness argument for locking protocol</title>
      <q2a>
        <text>
          Is the variant of 2PL to which equivalence is being established in
          the correctness argument clearly identified (e.g., conservative, strict,
          conservative strict)?
        </text>
        <answer>NO</answer>
      </q2a>
      <q2b>
        <text>
          Is there a sound argumentation of why the steps in the locking
          protocol designed correspond to steps taken in the chosen variant
          of 2PL?
        </text>
        <answer>NO</answer>
      </q2b>
      <q2c>
        <text>
          Is there an argument for the need to take into account predicate
          reads, with appropriate justification?
        </text>
        <answer>NO</answer>
      </q2c>
      <q2d>
        <text>
          Provide comments on why you found any aspects of the correctness
          argument provided to be lacking, incorrect, or in need of improvement.
        </text>
        <answer>The locking protocol is not correctly implemented. For instance,
        in removeBooks the read lock is released before the write lock is
        acquired. This violates all-or-nothing semantics and could cause the
        function to exit with an unhandled exception. Furthermore, the
        descriptions of the locking protocol does not relate to a specific
        variant of 2PL.</answer>
      </q2d>
    </question2>

    <question3>
      <title>Deadlocks</title>
      <q3a>
        <text>
          Does the solution contain a correct argument for why deadlocks can
          occur in the locking protocol or why deadlocks cannot occur?
        </text>
        <answer>NO</answer>
      </q3a>
      <q3b>
        <text>
          Provide comments on how the argument provided with respect to
          deadlocks could be improved
        </text>
        <answer>The argument itself is close to being acceptable, however the
        custom locking mechanism is broken and not thread-safe. Consequently it
        is itself a source of deadlocks. It is implemented using non-atomic
        ints, bools and ArrayLists. This means that lock and unlock operations
        are not atomic and therefore the locking system is essentially
        useless. Even if modifications to the lock state variables were made
        atomic the locking system itself is not at all robust; when nothing is
        locked calling releaseReadLock, getWriteLock and getReadLock in sequence
        will cause all code depending on the locking system to deadlock and all
        system resources will be spent executing spinlocks.</answer>
      </q3b>
    </question3>

    <question4>
      <title>Reflections on scalability</title>
      <q4a>
        <text>
          Is there a sound argument about the scalability limits of the
          concurrent implementation provided?
        </text>
        <answer>NO</answer>
      </q4a>
      <q4b>
        <text>
          Provide comments on how the reflections on scalability could be
          improved
        </text>
        <answer>The argument for scalability needs to deal with how performance
        is impacted by addition of hardware and distribution across several
        machines would impact the performance of the implementation.</answer>
      </q4b>
    </question4>

    <question5>
      <title>Argumentation on decisions made for performance</title>
      <q5a>
        <text>
          Is there a sound argument in the solution about the trade-off between
          locking overhead and concurrency?
        </text>
        <answer>NO</answer>
      </q5a>
      <q5b>
        <text>
          Provide comments on how the argument about performance trade-offs in
          the locking protocol could be improved
        </text>
        <answer>Argument does not deal with the most important concurrency
        limiting factor in the implementation. Due to the use of spinlocks,
        virtually no concurrency is possible in practice. It doesn't take a lot
        of waiting threads (holding spinlocks) before executing threads are
        starved of system resources.</answer>
      </q5b>
    </question5>
  </programming>
</review>
